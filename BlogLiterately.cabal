Name:           BlogLiterately
Version:        0.4
Synopsis:	A tool for posting Haskelly articles to blogs

Description:    BlogLiterately is a tool for uploading web log posts to web log servers
                that support the MetaWeblog API (such as WordPress-based blogs and many
                others).  Blog posts to be published via BlogLiterately are written in
                markdown [1] format, with extensions supported by pandoc [2].  Posts may be
                actual 'bird-style' literate Haskell files, with commentary in markdown.
                Code segments (including actual source lines from literate haskell files,
                as well as markdown code blocks) may be syntax-highlighted in the resulting
                HTML that is posted to the blog.  There are two types (two different
                libraries used) of formatting available for formatting code segments.
                .
                  * Hscolour (for formatting Haskell code segments)
                .
                  * highlighting-kate (for formatting Haskell and non-haskell segments)
                .
                The Markdown webpage has information about markdown formatting options,
                and the Pandoc website has information about the extensions supported.
                BlogLiterately extends the notation a bit further, for specifying code
                segments.  In basic markdown, A code segment is set off from normal
                text via indentation, e.g.:
                .
                >   -- This is a code segment but the tool doesn't know what kind!
                >   foo :: String -> String
                .
                Pandoc offers another way to specify a code segment:
                .
                > ~~~~ \{ .haskell \}
                > -- This is a code segment, and the tool knows it's Haskell!
                > foo :: String -> String
                > ~~~~
                .
                BlogLiterately lets you specify a Haskell segment this way (this is
                just a normal markdown indented code block with an extra tag at
                the top.  In either the above way of specifying the type of code
                in the block, you may specify other kinds of code besides haskell,
                e.g. cpp, bash, java, ml, eiffel, etc.):
                .
                >     [haskell]
                >     -- This is a code segment, and the tool knows it's Haskell!
                >     foo :: String -> String
                .
                Once you have written your markdown file, you can run the tool, specifying how
                you want it highlighted.  You can specify different highlighting modes for
                the haskell segments and the other code segments.  If using hscolour, you
                can specify that the highlighting be done 'inline' via CSS 'style'
                attributes.  You can use the default styling (which is similar to source
                code in documentation on hackage) or you can specify a configuration file
                which is (readable as) a Haskell value of type [(String,String)],
                and specifies a CSS style for each syntax class. An example (corresponding
                to the default configuration) is provided in the package archive
                (`hs-style`).
                .
                With highlighting-kate (always) and with hscolour
                (optionally), the style for syntax segments is specified using 'class'
                attributes, so the stylesheet must be provided separately.  Sample
                stylesheets are provided in the package archive file (`kate.css`, `hscolour.css`).
                .
                The options for BlogLiterately are hopefully self-explanatory, given the
                above background:
                .
                > BlogLierately v0.4, (C) Robert Greayer 2008-2010, Brent Yorgey 2012
                > This program comes with ABSOLUTELY NO WARRANTY
                >
                > BlogLiterately [FLAG] URL USER PASSWORD TITLE FILE
                >
                >   -? --help[=FORMAT]    Show usage information (optional format)
                >   -V --version          Show version information
                >   -v --verbose          Higher verbosity
                >   -q --quiet            Lower verbosity
                >   -t --test             do a test-run: html goes to stdout, is not posted
                >   -s --style=FILE       Style Specification (for --hscolour-icss)
                >      --hscolour-icss    hilight haskell: hscolour, inline style (default)
                >      --hscolour-css     hilight haskell: hscolour, separate stylesheet
                >      --hs-nohilight     no haskell hilighting
                >      --hs-kate          hilight haskell with highlighting-kate
                >      --other-code-kate  hilight other code with highlighting-kate
                >      --publish          Publish post (otherwise it's uploaded as a draft)
                >      --category=VALUE   post category (can specify more than one)
                >   -b --blogid=VALUE     Blog specific identifier (default=default)
                >      --postid=VALUE     Post to replace (if any)
                .
                .
                To post to a WordPress blog, use something like:
                .
                >     BlogLiterately http://blogurl.example.com/xmlrpc.php \
                >         myname mypasswd "Sample" Sample.lhs
                .
                (which creates a new post).  If, for example, the post id of that post
                (which BlogLiterately prints when it uploads a new post) is '37', then
                to update the post, the command would be:
                .
                >     BlogLiterately --postid=37 http://blogurl.example.com/xmlrpc.php \
                >         myname mypasswd "Sample" Sample.lhs
                .
                and the post will be updated with the new text.
                .
                References:
                .
                  1. <http://daringfireball.net/projects/markdown/>
                .
                  2. <http://johnmacfarlane.net/pandoc/>

Cabal-Version:  >= 1.6
Homepage:       none
License:        GPL
License-file:   LICENSE
Category:	Web
Copyright:	Copyright (c) Robert Greayer 2008-2010, Brent Yorgey 2012
Author:         Robert Greayer <robgreayer@yahoo.com>
Maintainer:	Brent Yorgey <byorgey@cis.upenn.edu>
Stability:	experimental
Build-Type:     Simple
Tested-With:	GHC ==7.4.1
Extra-Source-Files: hscolour.css
                    kate.css
                    hs-style
Executable BlogLiterately
  Build-Depends:  base >= 4.0 && < 4.6, process >= 1.1 && < 1.2,
                  transformers >= 0.3 && < 0.4, parsec >= 3 && < 3.2,
                  HaXml >= 1.22 && < 1.23, utf8-string >= 0.3 && < 0.4,
                  hscolour >= 1.20 && < 1.21, blaze-html >= 0.5 && < 0.6,
                  cmdargs >= 0.9.5 && < 0.10,
                  haxr >= 3000.8 && < 3000.9, pandoc >= 1.9 && < 1.10
  Main-Is:        BlogLiterately.lhs
  Hs-Source-Dirs: src
  Ghc-Options:    -fwarn-unused-imports
